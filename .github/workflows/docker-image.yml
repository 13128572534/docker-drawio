name: Docker Image CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        base-image: [debian, alpine]
    env:
      REPO: jgraph/drawio
      BASE_IMAGE: ${{ matrix.base-image }}
      HTTP_PORT: 32733
      HTTPS_PORT: 32734
    steps:
    - uses: actions/checkout@v2
    - name: Build the ${{ matrix.base-image }} Docker image
      run: |
        # Get draw.io current latest version
        wget https://raw.githubusercontent.com/jgraph/drawio/master/VERSION
        export VERSION=`cat VERSION`
        docker build -f ${BASE_IMAGE}/Dockerfile -t ${REPO}:${VERSION} ${BASE_IMAGE}/
        docker run --name 'drawio' -d -p ${HTTP_PORT}:8080 -p ${HTTPS_PORT}:8443 ${REPO}:${VERSION}
        sleep 10
        docker logs drawio
        docker exec drawio /bin/bash -c "curl -i http://localhost:8080"
  release:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        base-image: [debian, alpine]
    env:
      REPO: jgraph/drawio
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
    steps:
    - uses: actions/checkout@v2
    - name: Build the ${{ matrix.base-image }} Docker image
      run: |
        export GIT_BRANCH=`echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }'`
        export TAG=`if [ "$GIT_BRANCH" == "master" ]; then echo "latest"; else echo $GIT_BRANCH ; fi`
        export ALPINE_TAG=`if [ "$GIT_BRANCH" == "master" ]; then echo "alpine"; else echo $GIT_BRANCH-alpine ; fi`
        # Get draw.io current latest version
        wget https://raw.githubusercontent.com/jgraph/drawio/master/VERSION
        export VERSION=`cat VERSION`
        # Compute docker tag again if this branch is the latest
        export TAG=`if [ "$GIT_BRANCH" == "v${VERSION}" ]; then echo "latest"; else echo $TAG ; fi`
        export ALPINE_TAG=`if [ "$GIT_BRANCH" == "v${VERSION}" ]; then echo "alpine"; else echo $ALPINE_TAG ; fi` 
        echo ">>> $GIT_BRANCH $TAG $ALPINE_TAG"
        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin;
        docker tag ${REPO}:${VERSION} ${REPO}:$TAG;
        docker push ${REPO}:${TAG};
        docker push ${REPO}:${VERSION};
